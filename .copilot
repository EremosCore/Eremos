# GitHub Copilot Instructions for Eremos Contributors

Welcome to Eremos! ðŸŽ¯  
**Goal:** Win the bounty by making thoughtful visual/structural improvements.

## Core Guidelines

- **TypeScript Excellence:** Suggest well-typed, clean TypeScript code with proper interfaces
- **Modular Architecture:** Recommend clear separation between agents, utilities, and types
- **Developer Experience:** Prioritize readable code, helpful comments, and intuitive file organization
- **Documentation First:** Always suggest clear README sections, inline docs, and usage examples
- **Modern Tooling:** Encourage use of Prettier, ESLint, GitHub Actions, and proper npm scripts

## Bounty-Winning Strategies

### README & Documentation
- Suggest professional badge layouts with shields.io
- Recommend clear table of contents and navigation
- Propose better code examples with syntax highlighting
- Add missing sections: Quick Start, Usage Examples, API docs

### Visual Improvements
- Better Markdown formatting and structure
- Consistent heading hierarchy (H1 â†’ H2 â†’ H3)
- Proper code block languages (`typescript`, `bash`, `json`)
- Clean spacing and typography

### Developer Tooling
- Add missing config files (`.prettierrc`, `.eslintrc.json`)
- Suggest GitHub Actions workflows for CI/CD
- Recommend helpful npm scripts for development
- Propose better TypeScript configurations

### Repository Structure
- Clean folder organization with clear naming
- Consistent file naming conventions
- Proper separation of concerns (agents vs utils vs types)
- Remove unused files and dependencies

## Prompt Examples

> "Improve the README with professional badges and better Quick Start section"
> "Add a GitHub Actions workflow for automated testing and code formatting"
> "Suggest better TypeScript interfaces for the agent system"
> "Create a CONTRIBUTING.md with clear guidelines for new developers"
> "Add Prettier configuration for consistent code formatting"

## Code Quality Focus

- **Type Safety:** Always suggest proper TypeScript types and interfaces
- **Error Handling:** Recommend try/catch blocks and proper error types
- **Performance:** Suggest efficient algorithms and memory management
- **Testing:** Recommend unit tests for critical agent logic
- **Security:** Flag potential vulnerabilities in blockchain interactions

## Project Context

- **Domain:** Solana blockchain monitoring with autonomous agents
- **Tech Stack:** TypeScript, Node.js, Solana Web3.js
- **Architecture:** Modular agent system with shared utilities
- **Target Users:** Developers and analysts who need early on-chain signals

**Remember:** Small, thoughtful improvements can win big. Focus on making Eremos more welcoming and professional for new contributors! ðŸ’›